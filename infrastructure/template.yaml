AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Infrastructure for IoT Sensor Data Collection & Analytics Platform

Parameters:
  ProjectName:
    Type: String
    Description: Name of the project
  Environment:
    Type: String
    Description: Deployment environment (e.g., dev, prod)

Resources:

  # DynamoDB Table for Sensor Data
  SensorDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-SensorDataTable'
      AttributeDefinitions:
        - AttributeName: device_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: device_id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_IMAGE  # Enable DynamoDB Streams
    DeletionPolicy: Retain

  # S3 Bucket for Configuration
  ConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-config-${AWS::AccountId}'
    DeletionPolicy: Retain

  # S3 Bucket for Code
  CodeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-code-${AWS::AccountId}'
    DeletionPolicy: Retain

  # IAM Role for Lambda Functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-LambdaExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                Resource: '*'
        - PolicyName: S3Access
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub '${ConfigBucket.Arn}/*'
        - PolicyName: SNSPublishAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref SensorAlertTopic
        - PolicyName: KinesisAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:PutRecord
                  - kinesis:PutRecords
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                Resource: '*'

  # SNS Topic for Alerts
  SensorAlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ProjectName}-SensorAlertTopic'
    DeletionPolicy: Retain

  # IAM Policy for SNS Access
  SNSPublishAccess:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${ProjectName}-SNSPublishAccess'
      Roles:
        - !Ref LambdaExecutionRole
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource: !Ref SensorAlertTopic

  # Kinesis Data Stream for Sensor Data
  SensorDataStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub "${ProjectName}-SensorDataStream"
      ShardCount: 1

  # Kinesis Data Analytics Application
  KinesisAnalyticsApplication:
    Type: AWS::KinesisAnalyticsV2::Application
    Properties:
      ApplicationName: !Sub "${ProjectName}-AnalyticsApp"
      RuntimeEnvironment: SQL-1_0
      ServiceExecutionRole: !GetAtt KinesisAnalyticsRole.Arn
      ApplicationConfiguration:
        SqlApplicationConfiguration:
          Inputs:
            - NamePrefix: "SOURCE_SQL_STREAM"
              KinesisStreamsInput:
                ResourceARN: !GetAtt SensorDataStream.Arn
              InputSchema:
                RecordFormat:
                  RecordFormatType: JSON
                  MappingParameters:
                    JSONMappingParameters:
                      RecordRowPath: "$"
                RecordColumns:
                  - Name: "device_id"
                    SqlType: "VARCHAR(50)"
                    Mapping: "$.device_id"
                  - Name: "timestamp"
                    SqlType: "TIMESTAMP"
                    Mapping: "$.timestamp"
                  - Name: "temperature"
                    SqlType: "FLOAT"
                    Mapping: "$.temperature"
          ApplicationCodeConfiguration:
            CodeContent:
              S3ContentLocation:
                BucketARN: !Sub "arn:aws:s3:::${CodeBucket}"
                FileKey: "analytics/real_time_metrics.sql"
            CodeContentType: "SQL"

  # IAM Role for Kinesis Analytics
  KinesisAnalyticsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: kinesisanalytics.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonKinesisAnalyticsFullAccess

  # Lambda Function: Data Processor
  DataProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-DataProcessor'
      Handler: data_processor.lambda_handler
      Runtime: python3.8
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key: lambda_functions.zip
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref SensorDataTable
          KINESIS_STREAM_NAME: !Ref SensorDataStream
      Events:
        KinesisEvent:
          Type: Kinesis
          Properties:
            Stream: !Ref SensorDataStream
            StartingPosition: TRIM_HORIZON
      TracingConfig:
        Mode: Active  # Enable X-Ray tracing

  # Lambda Function: Alert Handler
  AlertHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-AlertHandler'
      Handler: alert_handler.lambda_handler
      Runtime: python3.8
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key: lambda_functions.zip
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SensorAlertTopic
          CONFIG_BUCKET: !Ref ConfigBucket
          CONFIG_KEY: 'config/config.json'
      TracingConfig:
        Mode: Active  # Enable X-Ray tracing

  # Create event source mapping for the AlertHandlerFunction
  AlertHandlerEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt SensorDataTable.StreamArn
      FunctionName: !Ref AlertHandlerFunction
      StartingPosition: LATEST
      BatchSize: 100
      Enabled: True

  # API Gateway Rest API
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-Api'
      EndpointConfiguration:
        Types:
          - REGIONAL
      Body:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: !Sub 's3://${CodeBucket}/api_definition.yaml'

  # API Gateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Ref Environment

  # API Gateway Resource and Method for /sensor-data
  ApiGatewayResourceSensorData:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'sensor-data'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodPostSensorData:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref ApiGatewayResourceSensorData
      RestApiId: !Ref ApiGatewayRestApi
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DataProcessorFunction.Arn}/invocations'

  # Permission for API Gateway to invoke Lambda
  ApiGatewayLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DataProcessorFunction
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/${Environment}/POST/sensor-data'

  # API Gateway Usage Plan and API Key
  ApiGatewayUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: !Sub '${ProjectName}-UsagePlan'
      ApiStages:
        - ApiId: !Ref ApiGatewayRestApi
          Stage: !Ref Environment
      Throttle:
        BurstLimit: 1000
        RateLimit: 5000

  ApiGatewayApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: !Sub '${ProjectName}-ApiKey'
      Enabled: true

  ApiGatewayUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiGatewayApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiGatewayUsagePlan

  # AWS IoT Policy
  IoTPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyName: !Sub '${ProjectName}-IoTPolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'iot:*'
            Resource: '*'

  # AWS IoT Thing
  IoTThing:
    Type: AWS::IoT::Thing
    Properties:
      ThingName: !Sub '${ProjectName}-${DeviceId}'

  # AWS IoT Certificate
  IoTCertificate:
    Type: AWS::IoT::Certificate
    Properties:
      Status: ACTIVE
    DependsOn: IoTPolicy

  # Attach Policy to Certificate
  IoTPolicyCertificateAttachment:
    Type: AWS::IoT::PolicyPrincipalAttachment
    Properties:
      PolicyName: !Ref IoTPolicy
      Principal: !Ref IoTCertificate

  # Attach Certificate to Thing
  IoTThingCertificateAttachment:
    Type: AWS::IoT::ThingPrincipalAttachment
    Properties:
      ThingName: !Ref IoTThing
      Principal: !Ref IoTCertificate

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
  IoTEndpoint:
    Value: !Sub '${AWS::IoT::Endpoint}'
    Description: 'AWS IoT Core Endpoint'
  CertificateArn:
    Value: !Ref IoTCertificate
    Description: 'AWS IoT Certificate ARN'